apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "my-react-app.fullname" . }}-deployment
  labels:
    app: {{ include "my-react-app.fullname" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "my-react-app.fullname" . }}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  progressDeadlineSeconds: 600

  template:
    metadata:
      labels:
        app: {{ include "my-react-app.fullname" . }}
    spec:
      {{- if .Values.imagePullSecretName }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecretName }}
      {{- end }}

      {{- if .Values.pvc.enabled }}
      initContainers:
        - name: init-copy-site
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["sh","-c"]
          args:
            - |
              if [ -z "$(ls -A /mnt/html 2>/dev/null)" ]; then
                cp -r /usr/share/nginx/html/* /mnt/html/ || true
                echo "Init: copied site content to PVC"
              else
                echo "Init: PVC already has content"
              fi
          volumeMounts:
            - name: site
              mountPath: /mnt/html
      {{- end }}

      containers:
        - name: nginx
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 80

          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}

          readinessProbe:
            httpGet: { path: /, port: 80 }
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 6

          livenessProbe:
            httpGet: { path: /, port: 80 }
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3

          startupProbe:
            httpGet: { path: /, port: 80 }
            periodSeconds: 2
            failureThreshold: 60

          {{- if .Values.pvc.enabled }}
          volumeMounts:
            - name: site
              mountPath: /usr/share/nginx/html
          {{- end }}

      {{- if .Values.pvc.enabled }}
      volumes:
        - name: site
          persistentVolumeClaim:
            claimName: {{ .Values.pvc.name }}
      {{- end }}